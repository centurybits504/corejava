MySQL  Indexes?
Indexes are used to find rows with specific column values quickly. 
Without an index, MySQL must begin with the first row and then read through the entire table to find the relevant rows. The larger the table, the more this costs. 
If the table has an index for the columns in question, MySQL can quickly determine the position to seek to in the middle of the data file without having to look at all the data. 
If a table has 1,000 rows, this is at least 100 times faster than reading sequentially. If you need to access most of the rows, it is faster to read sequentially, because this minimizes disk seeks.
Most MySQL indexes (PRIMARY KEY, UNIQUE, INDEX, and FULLTEXT) are stored in B-trees. 

An index can be created on a table to find data more quickly and efficiently.
The users cannot see the indexes, they are just used to speed up searches/queries.
----
Connection(I) :A Connection is a session between java application & database.
DriverManager(C)
Statement(I)
PrepareStatement(I)
CallableStatement(I) :To call the stored procedures and functions, CallableStatement interface is used.
ResultSet(I)
DataBaseMetaData(I):It provides methods to get metadata from the  database(about schema names,table names,column names,column types etc). 
ResultSetMetaData (I):It provides methods to get metadata from the ResultSet object.
RowSet(I) : 
----
http://www.techfaq360.com/viewFreshers.jsp?tutorialId=1016
----
5 Steps to connect to the database in java:
Loading&Register the driver class
Creating connection
Creating either statement,PreparedStatement,CallableStatement as per the requirement.
Executing queries
Closing connection
----
DriverManager class:
The DriverManager class acts as an interface between user and drivers.
The DriverManager class maintains a list of Driver classes that have registered themselves by calling the method DriverManager.registerDriver().
It has methods to register,de-register the driver classes & also methods that establishe's  connection with   
database's(getConnection(String url) ,getConnection(url,uname,pwd)).
All methods in DriverManager are static.
----
Connection interface:
A Connection is a session between java application & database.
Connection inteface is factory of Statement,PreparedStatement,CallableStatement,DataBaseMetadata etc.
Connection interface contains methods for Transaction management ,they 're commit(),rollback(),savePoint() etc
By default,connection commit's the changes after executing queries.
----
Statement:
Statement interface provides methods to execute queries with the database.
we can't execute parameterize queries with method's of statement interface.
sql injection is possible with statement interface methods.
Statement interface is a factory of ResultSet i.e, it contains factory methods to get the object's of ResultSet.
we can perform select,insert,update,delete,batchprocessing,transactionmanagement with Statement Inteface.
present in com.mysql.jdbc.* package.
----
PreparedStatement interface:
PreparedStatement interface is the subinteface of Statement inteface.
Like Statement ,PreparedStatement interface also contains methods to execute sql queries with the database.
we can execute parameterize queries with method's of PreparedStatement interface.
sql injection is n't possible with PreparedStatement interface methods.
The performance of the application will be faster if you use PreparedStatement interface because query is compiled only once.
----
DatabaseMetaData interface:
DatabaseMetaData interface is used to get meta-data information about database product-name,product-version,user-name,schema-names,table-names,column-names,DriverName,DriverVersion.
The getMetaData() method of Connection interface returns the object of DatabaseMetaData. 
Syntax: public DatabaseMetaData getMetaData()throws SQLException  
----
ResultSetMetaData Interface:
It provides methods to get meta-data(total-column-count,column-name,column-type etc) for data in  ResultSet Object.
How to get the object of ResultSetMetaData:
The getMetaData() method of ResultSet interface returns the object of ResultSetMetaData. Syntax:
public ResultSetMetaData getMetaData()throws SQLException
----
CallableStatement Interface:
To call the stored procedures(is used to perform business logic.) and functions(is used to perform calculation.), CallableStatement interface is used.
How to get the instance of CallableStatement?
The prepareCall() method of Connection interface returns the instance of CallableStatement.
Syntax is given below:
public CallableStatement prepareCall("{ call procedurename(?,?...?)}");
----
ResultSet:
A table of data representing a database result set, which is usually generated by executing a statement that queries the database.
A ResultSet object maintains a cursor pointing to its current row of data. 
Initially the cursor is positioned before the first row. 
The next method moves the cursor to the next row, and because it returns false when there are no more rows in the ResultSet object, it can be used in a while loop to iterate through the result set.
A default ResultSet object is not updatable and has a cursor that moves forward only.
Thus, you can iterate through it only once and only from the first row to the last row.
It is possible to produce ResultSet objects that are scrollable and/or updatable.

----
First Max:-
SELECT MAX(sno) AS Second_Max
FROM test.adsclicks

Second max in a table:-
SELECT MAX(sno) AS Second_Max
FROM test.adsclicks
WHERE sno<(SELECT MAX(sno)
FROM test.adsclicks);


Third_max:-
SELECT MAX(sno) AS Third_max
FROM test.adsclicks
WHERE sno<(SELECT MAX(sno)
FROM test.adsclicks
WHERE sno<(SELECT MAX(sno)
FROM test.adsclicks));

like this we can find any max..
----
http://www.careerride.com/Interview-Questions-Java-JDBC-5.aspx
http://www.tutorialspoint.com/jdbc/jdbc_interview_questions.htm
http://www.developersbook.com/jdbc/interview-questions/jdbc-interview-questions-faqs.php
http://javarevisited.blogspot.ca/2011/11/database-transaction-tutorial-example.html
----
--
emp599(id, salary, name)
--
ALTER TABLE emp599
MODIFY COLUMN name VARCHAR(24);//modifies type of name

ALTER TABLE emp599
DROP COLUMN name;//drop column name

ALTER TABLE emp599
ADD COLUMN name VARCHAR(25);//add column name
--

CREATE VIEW view_name AS
SELECT * FROM emp599;

SELECT * FROM view_name;

DROP VIEW view_name;
--
SELECT (IFNULL(name,'sAI')) AS NAMES FROM emp599;
--
--
SELECT *FROM emp599
GROUP BY id;
--
SELECT *FROM emp599
WHERE id >5
GROUP BY id;
--
SELECT *FROM emp599
WHERE id >5
GROUP BY id
HAVING id < 8;
--
----


 










 